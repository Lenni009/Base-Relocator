(()=>{const e=["left","right"];function t(e){return`\n\t\t<div class="column" id="${e}">\n\t\t\t<input type="text" placeholder="ðŸ”Ž Search" class="input" oninput="filterList(this)">\n\t\t\t<div class="bases"></div>\n\t\t</div>`}const s=document.querySelector("#output .columns"),n=s.children;s.insertAdjacentHTML("afterbegin",t(e[0])),Array.from(n).at(-1).insertAdjacentHTML("beforebegin",t(e[1]))})();const baseData=new Object;function readJSON(e){const t=e.value;warn("Potential unicode characters detected in JSON. This could lead to basenames showing up weirdly in\n\t\tthis list and in the game.\n\t\t<br>\n\t\tTo resolve this issue, use the NomNom save editor (linked below) to\n\t\tcopy the JSON.",t.includes("\\u")),delete baseData.bases,delete baseData.newBases;try{baseData.bases=JSON.parse(t)}catch(e){console.warn("JSON error detected: ",e),t&&warn("JSON is not correctly formatted. Please make sure you copied the whole PersistentPlayerBases section.",!0);const s=document.getElementsByClassName("bases");for(const e of s)e.innerHTML="";return}Object.freeze(baseData.bases),listBuilder()}function warn(e,t){const s=document.getElementById("warning");s.innerHTML=e,s.style.display=t?"block":""}function listBuilder(){const e=document.getElementsByClassName("bases");for(const t of e)t.style.willChange="contents";const t=baseData.bases,s=new Array;for(let e=0;e<t.length;e++){const n=buildListItem(e,t[e].Name);s.push(n)}const n=s.join("");for(const t of e)t.innerHTML=n,t.style.willChange=""}function buildListItem(e,t){const s=t?"div":"span",n=document.createElement(s);return n.dataset.id=e,n.innerText=t,n.setAttribute("onclick","highlightBase(this)"),n.outerHTML}function highlightBase(e){const t=e.closest(".bases").querySelector(".clicked");t?.classList.remove("clicked"),t!=e&&e.classList.add("clicked")}function swapBases(e){e.style.pointerEvents="none";const t=document.getElementsByClassName("clicked");if(2!=t.length||!t[0]||!t[1]||t[0]?.dataset?.id==t[1]?.dataset?.id)return e.classList.remove("is-primary"),e.classList.add("is-danger"),e.innerText="Failed!",void setTimeout((()=>{e.classList.remove("is-danger"),e.classList.add("is-primary"),e.innerText=baseData.buttonText,e.style.pointerEvents=""}),1500);const s=baseData.newBases??=structuredClone(baseData.bases),n=new Array;for(const e of t)n.push(e.dataset.id);const a=structuredClone(s[n[0]].Objects),o=structuredClone(s[n[1]].Objects);s[n[1]].Objects=a,baseData.copy||(s[n[0]].Objects=o);const i=baseData.copy?"Copied":"Swapped";e.innerText=`${i}!`,addToLog(`${i} "${t[0].innerText}" ${baseData.copy?"to":"and"} "${t[1].innerText}"`),setTimeout((()=>{e.innerText=baseData.buttonText,e.style.pointerEvents=""}),1500)}function copyButton(e){e.style.pointerEvents="none";const t=e.innerText;if(!baseData.newBases)return e.classList.remove("is-primary"),e.classList.add("is-danger"),e.innerText="Failed!",void setTimeout((()=>{e.classList.remove("is-danger"),e.classList.add("is-primary"),e.innerText=t,e.style.pointerEvents=""}),1500);const s=JSON.stringify(baseData.newBases,null,"\t");navigator.clipboard.writeText(s),e.innerText="Copied!",setTimeout((()=>{e.innerText=t,e.style.pointerEvents=""}),1500)}function filterList(e){const t=e.value.trim().toLowerCase(),s=e.nextElementSibling.children;for(const e of s){const s=e.innerText.toLowerCase();!t||s.includes(t)?e.style.display="":e.style.display="none"}}function addToLog(e){const t=document.getElementById("actionlog"),s=document.createElement("div");s.innerText=e,s.classList.add("logItem"),t.appendChild(s)}function reset(){if(!baseData.bases)return;const e=document.getElementsByClassName("clicked");for(const t of e)t.classList.remove("clicked");baseData.newBases=structuredClone(baseData.bases),addToLog("Undid Edits")}function checkboxChange(e){baseData.copy=e;const t=document.querySelector("#output .columns .arrow");t.classList.toggle("copy",e),t.classList.toggle("swap",!e);const s=document.getElementById("swap");baseData.buttonText=e?"Copy Selected Base":"Swap Selected Bases",s?.style?.pointerEvents||(s.innerText=baseData.buttonText)}
